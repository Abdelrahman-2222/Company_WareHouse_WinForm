// <auto-generated />
using System;
using CompnayForm.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompanyForm.Migrations
{
    [DbContext(typeof(CompanyWarehouseContext))]
    partial class CompanyWarehouseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyForm.Entities.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CompanyForm.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.Property<string>("CustomerFax")
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.Property<string>("CustomerMobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CompanyForm.Entities.CustomerOwnerRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("CustomerOwnerRelationships");
                });

            modelBuilder.Entity("CompanyForm.Entities.DisbursementVoucher", b =>
                {
                    b.Property<int>("DisbursementVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisbursementVoucherId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DisbursementVoucherDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisbursementVoucherNumber")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("DisbursementVoucherId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DisbursementVoucherNumber")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.ToTable("DisbursementVouchers");
                });

            modelBuilder.Entity("CompanyForm.Entities.DisbursementVoucherList", b =>
                {
                    b.Property<int>("DisbursementVoucherId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("DisbursementVoucherListQuantity")
                        .HasColumnType("int");

                    b.HasKey("DisbursementVoucherId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("DisbursementVoucherLists");
                });

            modelBuilder.Entity("CompanyForm.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemCode")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Qunatity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemCode")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CompanyForm.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RecipientUserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("RecipientUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CompanyForm.Entities.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerId"));

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("CompanyForm.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("SupplierEmail")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.Property<string>("SupplierMobileNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SupplierId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("CompanyForm.Entities.SupplierOwnerRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierOwnerRelationships");
                });

            modelBuilder.Entity("CompanyForm.Entities.SupplyVoucher", b =>
                {
                    b.Property<int>("SupplyVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyVoucherId"));

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SupplyVoucherDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplyVoucherNumber")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("SupplyVoucherId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplyVoucherNumber")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.ToTable("SupplyVouchers");
                });

            modelBuilder.Entity("CompanyForm.Entities.SupplyVoucherList", b =>
                {
                    b.Property<int>("SupplyVoucherId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyVoucherListDaysUntilExpiration")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("DATEDIFF(day, GETDATE(), SupplyVoucherListExpirationDate)");

                    b.Property<DateTime>("SupplyVoucherListExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SupplyVoucherListProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplyVoucherListQuantity")
                        .HasColumnType("int");

                    b.HasKey("SupplyVoucherId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("SupplyVoucherLists");
                });

            modelBuilder.Entity("CompanyForm.Entities.TransferOperation", b =>
                {
                    b.Property<int>("TransferOperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferOperationId"));

                    b.Property<int>("FromWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("ToWarehouseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransferOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransferOperationNumber")
                        .HasColumnType("int");

                    b.HasKey("TransferOperationId");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("ToWarehouseId");

                    b.HasIndex("TransferOperationNumber")
                        .IsUnique();

                    b.ToTable("TransferOperations");
                });

            modelBuilder.Entity("CompnayForm.Entities.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("WarehousePersonName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("WarehouseId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("CompanyForm.Entities.Customer", b =>
                {
                    b.HasOne("CompanyForm.Entities.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("CompanyForm.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompanyForm.Entities.CustomerOwnerRelationship", b =>
                {
                    b.HasOne("CompanyForm.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyForm.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CompanyForm.Entities.DisbursementVoucher", b =>
                {
                    b.HasOne("CompanyForm.Entities.Customer", "Customer")
                        .WithMany("DisbursementVouchers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompnayForm.Entities.Warehouse", "Warehouse")
                        .WithMany("DisbursementVouchers")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("CompanyForm.Entities.DisbursementVoucherList", b =>
                {
                    b.HasOne("CompanyForm.Entities.DisbursementVoucher", "DisbursementVoucher")
                        .WithMany("DisbursementVoucherLists")
                        .HasForeignKey("DisbursementVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyForm.Entities.Item", "Item")
                        .WithMany("DisbursementVoucherLists")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DisbursementVoucher");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CompanyForm.Entities.Item", b =>
                {
                    b.HasOne("CompnayForm.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("CompanyForm.Entities.Notification", b =>
                {
                    b.HasOne("CompanyForm.Entities.AppUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("CompanyForm.Entities.Owner", b =>
                {
                    b.HasOne("CompanyForm.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompanyForm.Entities.Supplier", b =>
                {
                    b.HasOne("CompanyForm.Entities.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("CompanyForm.Entities.Supplier", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompanyForm.Entities.SupplierOwnerRelationship", b =>
                {
                    b.HasOne("CompanyForm.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyForm.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CompanyForm.Entities.SupplyVoucher", b =>
                {
                    b.HasOne("CompanyForm.Entities.Supplier", "Supplier")
                        .WithMany("SupplierVouchers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompnayForm.Entities.Warehouse", "Warehouse")
                        .WithMany("SupplyVouchers")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("CompanyForm.Entities.SupplyVoucherList", b =>
                {
                    b.HasOne("CompanyForm.Entities.Item", "Item")
                        .WithMany("SupplyVoucherLists")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompanyForm.Entities.SupplyVoucher", "SupplyVoucher")
                        .WithMany("SupplyVoucherLists")
                        .HasForeignKey("SupplyVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SupplyVoucher");
                });

            modelBuilder.Entity("CompanyForm.Entities.TransferOperation", b =>
                {
                    b.HasOne("CompnayForm.Entities.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompanyForm.Entities.Item", "Item")
                        .WithMany("TransferOperations")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyForm.Entities.Supplier", "Supplier")
                        .WithMany("TransferOperations")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompnayForm.Entities.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromWarehouse");

                    b.Navigation("Item");

                    b.Navigation("Supplier");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("CompnayForm.Entities.Warehouse", b =>
                {
                    b.HasOne("CompanyForm.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CompanyForm.Entities.Customer", b =>
                {
                    b.Navigation("DisbursementVouchers");
                });

            modelBuilder.Entity("CompanyForm.Entities.DisbursementVoucher", b =>
                {
                    b.Navigation("DisbursementVoucherLists");
                });

            modelBuilder.Entity("CompanyForm.Entities.Item", b =>
                {
                    b.Navigation("DisbursementVoucherLists");

                    b.Navigation("SupplyVoucherLists");

                    b.Navigation("TransferOperations");
                });

            modelBuilder.Entity("CompanyForm.Entities.Supplier", b =>
                {
                    b.Navigation("SupplierVouchers");

                    b.Navigation("TransferOperations");
                });

            modelBuilder.Entity("CompanyForm.Entities.SupplyVoucher", b =>
                {
                    b.Navigation("SupplyVoucherLists");
                });

            modelBuilder.Entity("CompnayForm.Entities.Warehouse", b =>
                {
                    b.Navigation("DisbursementVouchers");

                    b.Navigation("SupplyVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
